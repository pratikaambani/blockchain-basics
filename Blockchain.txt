https://www.coursera.org/learn/blockchain-basics/


------------
Week 1 : BTC
------------

BTC Structure:
	Transactions are basic elements of Blockchain
	Transactions are validated and broadcasted
	Multiple transactions form a block
	blocks form a chain through digital data link
	Blocks go through consesus process to select next block to be added to chain
	Chosen blocks are verified and added to current chain
	Validation and consesus are done by peer nodes(minors)

Single transaction
	Unspent transaction output(UTXO)
	UTXO are inputs as well as output
	Structure of UTXO:
		Unique indentifier of the transaction that created the UTXO
		Index of this UTXO in the transaction's output list
		Value/Amount
		Optional script: Conditions under which output can be spent


	Transaction(Tx):
		Reference number of current transaction
		references to one or more input UTXO
		references to one or more output UTXO newly generated by the current transaction
		Total input amount and total output amount
		
Once a block is verified and algorithmically agreed by the miners, it is added to chain of blocks

https://smithandcrown.com/glossary/unspent-transaction-outputs-utxo/
https://medium.com/free-code-camp/explain-bitcoin-like-im-five-73b4257ac833


Most blockchain projects are built around three core properties: decentralization, scalability, and security. 

Block chain over traditional finance
Trustless
Unstoppable
Immutable
Decentralised
 lower cost
 Peer to peer
 Transparent
 Universal banking


Disadvantages
Environmental impact
Personal responsibility -- if lost, lost forever, no way to recover
Growing pains: slow speed: btc 7/sec, eth 30/sec, visa 24000/sec..... Solution: lightning network, allows transactions off the network
False Narratives: used in illegal activities

Blockchain usecases:
Crypto currencies
Smart contracts
Decentralised banking
Video games
P2p energy trading
Supply chain logistics tracking
Healthcare process optimization
Real estate processing platform
Nft market place
Music royalty tracking
AML tracking systems
Personal identity tracking
New insurance distribution
Automatic advertising campaigns





Basic Operations:
-----------------
		Validation of transactions
		Gathering transactions for a block
		Broadcasting valid transactions and blocks
		Consensus on next block creation
		Chaining blocks

Two roles of participants:
	1. Initiate transfer of value by creating transactions
	2. Minors: take addon work/computation to,
		verify transactions
		broadcast transactions
		Compete to claim the block
		Reach consesus by validating block
		broadcast the newly created block
		confirm the transactions
		--> for this, minors incentivised by BitCoins
	
	This process involves validation of >20 criterias: size, syntax, UTXO, etc

https://www.ccn.com/bitcoin-cash-pools-the-majority-of-bitcoin-sv-blocks-are-mined-by-unknown-yes-really/
https://medium.com/blockchain-review/how-does-the-blockchain-work-for-dummies-explained-simply-9f94d386e093
https://onezero.medium.com/how-does-the-blockchain-work-98c8cd01d2ae
https://smartereum.com/8970/how-do-bitcoin-nodes-verify-transactions/


BitCoins has support for additional scripting, Ethereum extended that and converted it into fullfledged Smart Contract
Based on this, 3 type of blockchains: 
	Only Cryptocurrency ex. BTC
	Cryptocurrency + Business Logic ex. Ethereum
	Only Business Logic ex. Linux foundation's Hyper Le


https://bitsonblocks.net/2015/09/01/gentle-introduction-bitcoin/
https://bitsonblocks.net/2015/09/09/gentle-introduction-blockchain-technology/
https://blog.ethereum.org/2015/08/07/on-public-and-private-blockchains/
https://cointelegraph.com/bitcoin-for-beginners/what-are-cryptocurrencies#accept-as-payment-for-business
https://www.coindesk.com/2017-bitcoins-year-2018-will-ethereums/
https://blockgeeks.com/guides/what-is-cryptocurrency/
https://www.coindesk.com/information/what-is-the-difference-between-open-and-permissioned-blockchains/

Image: https://i0.wp.com/bitsonblocks.net/wp-content/uploads/2015/09/bitcoin_blockchain_infographic1.jpg?ssl=1



Generate Keys on your own: https://www.freecodecamp.org/news/how-to-generate-your-very-own-bitcoin-private-key-7ad0f4936e6c/
Each block has
	Content 
	Header
	
Block explorer:
	https://www.blockchain.com/explorer
	https://blockexplorer.com/
	https://etherscan.io/

Genesis block: 
	https://www.blockchain.com/btc/block/0
	https://etherscan.io/block/0


------------
Week 2 : ETH
------------

Ethereum is an open blockchain platform that lets anyone build and use decentralized applications that run on blockchain technology. Like Bitcoin, no one controls or owns Ethereum


Learning Objectives:
	Discuss, at a conceptual level, the innovation of the Ethereum Blockchain, namely, the smart contract.
	Illustrate Ethereum Blockchain protocol: structural elements and operational aspects.
	Demonstrate the concept of gas, the fuel or payment model for code execution, and the incentive model of Ethereum Blockchain.



Smart Contract:
	Piece of code deployed on blockchain node

Like: BTC can do ++ and --. Smart Contracts can handle more complex functions. 
Example: Auction
if((age>18) && (bid>highestBidSoFar)):
	accept
else:
	reject

How does it look like:
	Class definition
	it has data, functions/methods, public/private modifiers, getters/setters
	
Example programming language: Solidity

This code runs on Ethereum Virtual Machine. EVM provides Run Anywhere abstraction layer for contract code.

https://ethdocs.org/en/latest/introduction/what-is-ethereum.html
https://blockgeeks.com/guides/smart-contracts/
https://docs.soliditylang.org/en/develop/introduction-to-smart-contracts.html


Ethereum Virtual Machine:
	Ethereum is a programmable blockchain. Rather than give users a set of pre-defined operations (e.g. bitcoin transactions)
	Ethereum in the narrow sense refers to a suite of protocols that define a platform for decentralised applications
	Ethereum is “Turing complete”.
	Developers can create applications that run on the EVM using friendly programming languages modelled on existing languages like JavaScript and Python.
	The Ethereum platform itself is featureless or value-agnostic. Similar to programming languages, it is up to entrepreneurs and developers to decide what it should be used for.
	code running inside the EVM has no access to network, filesystem or other processes. Smart contracts even have limited access to other smart contracts.


BTC blockchain was defined in UTXO, ETH has accounts

There are two types of accounts:
	Externally Owned Accounts (EOAs): which are controlled by private keys
	Contract Accounts: which are controlled by their contract code and can only be “activated” by an EOA

Every account has a persistent key-value store mapping 256-bit words to 256-bit words called storage.
Furthermore, every account has a balance in Ether (in “Wei” to be exact, 1 ether is 10*18 wei) which can be modified by sending transactions that include Ether.

For most users, the basic difference between these is that human users control EOAs - because they can control the private keys which give control over an EOA. Contract accounts, on the other hand, are governed by their internal code. If they are “controlled” by a human user, it is because they are programmed to be controlled by an EOA with a certain address, which is in turn controlled by whoever holds the private keys that control that EOA. 
Smart contracts refers to code in a Contract Account: Programs that execute when a transaction is sent to that account. Users can create new contracts by deploying code to the blockchain.

Contract accounts only perform an operation when instructed to do so by an EOA. So it is not possible for a Contract account to be performing native operations like random number generation or API calls – it can do these things only if prompted by an EOA. This is because Ethereum requires nodes to be able to agree on the outcome of computation, which requires a guarantee of strictly deterministic execution.

Just as in the Bitcoin network, miners are tasked with solving a complex mathematical problem in order to successfully “mine” a block. This is known as a “Proof of Work”. Any computational problem that requires orders of magnitude more resources to solve algorithmically than it takes to verify the solution is a good candidate for proof of work. In order to discourage centralisation due to the use of specialised hardware (e.g. ASICs), as has occurred in the Bitcoin network, Ethereum chose a memory-hard computational problem. If the problem requires memory as well as CPU, the ideal hardware is in fact the general computer. This makes Ethereum’s Proof of Work ASIC-resistant, allowing a more decentralized distribution of security than blockchains whose mining is dominated by specialized hardware, like Bitcoin.


DApps: 
	ETH Allows you to run Applications in decentralized way

GAS: 
	Transaction includes function to be called on contract, must have enough ETH required to cover cost of running the computation that we are asking for.
	Contract will receive the transaction and use the gas paid to compute the function called
	It does not cost any ETH to read the info on blockchain

What are Smart Contracts?
	Smart contracts help you exchange money, property, shares, or anything of value in a transparent, conflict-free way while avoiding the services of a middleman.
	Example: Kinda Vending Machine

	Steps:
		Smart contracts are written as code and committed to the blockchain. The code and conditions in the contract are publicly available on the ledger.
		When an event outlined in the contract is triggerred. Ex: Expiration date or an asset's target price is reached - The code executes
		Regulators can watch activity on the blockchain to understand the market while still maintaining the privacy of individual actors.

	Example: 
		Rent
		https://blockgeeks.com/wp-content/uploads/2016/10/Smart-contract-code-1.png
		Government voting system
		Real estate: Ownership agreement
		Healthcare

	Smart Contracts are Awesome!
	Here’s what smart contracts give you:
		Autonomy: No intermediatory, broker
		Trust: 
		Backup
		Safety
		Speed
		Savings
		Accuracy
		IMAGE: 03 ETH smart-contracts
		
	Problem with Smart Contract: bugs in program
	

Bitcoin: bitcoin is great for processing Bitcoin transactions, but has limited ability for processing documents.
Side Chains: This is another name for blockchains that run adjacent to bitcoin and offer more scope for processing contracts.
NXT: NXT is a public blockchain platform that contains a limited selection of templates for smart contracts. You have to use what is given; you’re unable to code your own.

Blocks are added to the chain in rather regular intervals - for Ethereum this is roughly every 17 seconds

Introduction to Smart Contracts: https://github.com/ethereum/solidity/blob/develop/docs/introduction-to-smart-contracts.rst

Transaction in ETH includes:
	recipient of the message
	digital signature of the sender who is authorizing the transaction
	amount of Wei
	Optional data field or payload that contains msg to contract
	STARTGAS is value, max number of computational steps the transaction is allowed
	GASPRICE: value, fees sender is willing to pay for the transaction

ETH block has: Header, Transaction, Runnerup Headers
Example block: https://etherscan.io/block/4446308

Ethereum Structure
	https://ethereum.org/en/whitepaper/
	https://ethdocs.org/en/latest/account-management.html
	https://ethdocs.org/en/latest/introduction/community.html#community
	https://geth.ethereum.org/docs/dapp/native-accounts
	
